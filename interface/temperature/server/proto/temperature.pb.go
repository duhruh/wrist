// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server/proto/temperature.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReadingsRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadingsRequest) Reset()         { *m = ReadingsRequest{} }
func (m *ReadingsRequest) String() string { return proto.CompactTextString(m) }
func (*ReadingsRequest) ProtoMessage()    {}
func (*ReadingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6450478477c56320, []int{0}
}

func (m *ReadingsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadingsRequest.Unmarshal(m, b)
}
func (m *ReadingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadingsRequest.Marshal(b, m, deterministic)
}
func (m *ReadingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadingsRequest.Merge(m, src)
}
func (m *ReadingsRequest) XXX_Size() int {
	return xxx_messageInfo_ReadingsRequest.Size(m)
}
func (m *ReadingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadingsRequest proto.InternalMessageInfo

type Reading struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reading) Reset()         { *m = Reading{} }
func (m *Reading) String() string { return proto.CompactTextString(m) }
func (*Reading) ProtoMessage()    {}
func (*Reading) Descriptor() ([]byte, []int) {
	return fileDescriptor_6450478477c56320, []int{1}
}

func (m *Reading) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reading.Unmarshal(m, b)
}
func (m *Reading) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reading.Marshal(b, m, deterministic)
}
func (m *Reading) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reading.Merge(m, src)
}
func (m *Reading) XXX_Size() int {
	return xxx_messageInfo_Reading.Size(m)
}
func (m *Reading) XXX_DiscardUnknown() {
	xxx_messageInfo_Reading.DiscardUnknown(m)
}

var xxx_messageInfo_Reading proto.InternalMessageInfo

func (m *Reading) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*ReadingsRequest)(nil), "proto.ReadingsRequest")
	proto.RegisterType((*Reading)(nil), "proto.Reading")
}

func init() { proto.RegisterFile("server/proto/temperature.proto", fileDescriptor_6450478477c56320) }

var fileDescriptor_6450478477c56320 = []byte{
	// 148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x49, 0xcd, 0x2d, 0x48, 0x2d, 0x4a,
	0x2c, 0x29, 0x2d, 0x4a, 0xd5, 0x03, 0x8b, 0x08, 0xb1, 0x82, 0x29, 0x25, 0x41, 0x2e, 0xfe, 0xa0,
	0xd4, 0xc4, 0x94, 0xcc, 0xbc, 0xf4, 0xe2, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x25, 0x65,
	0x2e, 0x76, 0xa8, 0x90, 0x90, 0x04, 0x17, 0x7b, 0x6e, 0x6a, 0x71, 0x71, 0x62, 0x7a, 0xaa, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0x6b, 0x14, 0xc4, 0x25, 0x14, 0x82, 0x30, 0x33, 0x38,
	0xb5, 0xa8, 0x2c, 0x33, 0x39, 0x55, 0xc8, 0x86, 0x8b, 0x2f, 0xb8, 0xa4, 0x28, 0x35, 0x31, 0x17,
	0x66, 0xa6, 0x90, 0x18, 0xc4, 0x3a, 0x3d, 0x34, 0x4b, 0xa4, 0xf8, 0x50, 0xc5, 0x95, 0x18, 0x0c,
	0x18, 0x93, 0xd8, 0xc0, 0x42, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x9d, 0x27, 0x31, 0x1a,
	0xbb, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TemperatureServiceClient is the client API for TemperatureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TemperatureServiceClient interface {
	StreamReadings(ctx context.Context, in *ReadingsRequest, opts ...grpc.CallOption) (TemperatureService_StreamReadingsClient, error)
}

type temperatureServiceClient struct {
	cc *grpc.ClientConn
}

func NewTemperatureServiceClient(cc *grpc.ClientConn) TemperatureServiceClient {
	return &temperatureServiceClient{cc}
}

func (c *temperatureServiceClient) StreamReadings(ctx context.Context, in *ReadingsRequest, opts ...grpc.CallOption) (TemperatureService_StreamReadingsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TemperatureService_serviceDesc.Streams[0], "/proto.TemperatureService/StreamReadings", opts...)
	if err != nil {
		return nil, err
	}
	x := &temperatureServiceStreamReadingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TemperatureService_StreamReadingsClient interface {
	Recv() (*Reading, error)
	grpc.ClientStream
}

type temperatureServiceStreamReadingsClient struct {
	grpc.ClientStream
}

func (x *temperatureServiceStreamReadingsClient) Recv() (*Reading, error) {
	m := new(Reading)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TemperatureServiceServer is the server API for TemperatureService service.
type TemperatureServiceServer interface {
	StreamReadings(*ReadingsRequest, TemperatureService_StreamReadingsServer) error
}

// UnimplementedTemperatureServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTemperatureServiceServer struct {
}

func (*UnimplementedTemperatureServiceServer) StreamReadings(req *ReadingsRequest, srv TemperatureService_StreamReadingsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamReadings not implemented")
}

func RegisterTemperatureServiceServer(s *grpc.Server, srv TemperatureServiceServer) {
	s.RegisterService(&_TemperatureService_serviceDesc, srv)
}

func _TemperatureService_StreamReadings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadingsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TemperatureServiceServer).StreamReadings(m, &temperatureServiceStreamReadingsServer{stream})
}

type TemperatureService_StreamReadingsServer interface {
	Send(*Reading) error
	grpc.ServerStream
}

type temperatureServiceStreamReadingsServer struct {
	grpc.ServerStream
}

func (x *temperatureServiceStreamReadingsServer) Send(m *Reading) error {
	return x.ServerStream.SendMsg(m)
}

var _TemperatureService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TemperatureService",
	HandlerType: (*TemperatureServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamReadings",
			Handler:       _TemperatureService_StreamReadings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/proto/temperature.proto",
}
